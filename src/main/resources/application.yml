spring:
  # .env import
  config:
    import: optional:file:.env[.properties]
  datasource:
    url: jdbc:mysql://localhost:3306/${MYSQL_DATABASE}
    username: root
    password: ${MYSQL_USER_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      # ddl-auto : update 는 테이블을 자동으로 생성/업데이트 하지만, 프로덕션 환경에서는 사용하지 않는다.
      ddl-auto: update
      show_sql: true
      format_sql: true
    properties:
      hibernate:
        # Mysql Hibernate Dialect 를 사용한다.
        dialect: org.hibernate.dialect.MySQL8Dialect
        # Hibernate 락 쿼리로그 설정하기
      hibernate.connection.isolation: 8 # SERIALIZABLE
    logging:
      level:
        org.hibernate.SQL: DEBUG # Hibernate 실행 SQL 로그: Hibernate 가 실행하는 실제 SQL 쿼리로그를 출력
        org.hibernate.type.descriptor.sql: TRACE # SQL 파라미터 바인딩로그: SQL 쿼리에 사용되는 파라미터값 출력. 디버깅에 유용
        org.hibernate.engine.internal: DEBUG # Hibernate 내부동작로그 : Hibernate 내부 트랜잭션처리와 락관련 디버깅에 유용
    # SQL 쿼리문 공개
    show-sql: true

  # jackson
  jackson:
    serialization:
      fail-on-empty-beans: false

  # Spring 트랜잭션에서 사용되는 기본 격리수준을 설정함.
  # @Transactional 어노테이션에도 별도로 격리수준을 명시하지 않은 경우 기본값으로 사용됨
  #
  # transaction: 트랜잭션 격리 수준을 사용
  #   - READ_COMMITED : 커밋된 데이터만을 읽음(Dirty Read 방지)
  #       - Dirty Read : 한 트랜잭션이 아직 커밋되지 않은 다른 트랜잭션의 변경사항을 읽는 상황을 의미.
  #
  #   - REPEATABLE_READ : 동일 트랜잭션 내에서 동일한 쿼리 결과 보장 (Phantom-read 방지)
  #       - Phantom Read : 한 트랜잭션이 동일한 조건으로 여러번 쿼리를 실행할 때, 이전에 존재하지 않았던 데이터가 나타나는 상황
  #
  #   - SERIALIZABLE: 가장 높은 격리 수준. 동시성을 제한하지만 데이터 일관성을 보장
  transaction:
    isolation-level: SERIALIZABLE

